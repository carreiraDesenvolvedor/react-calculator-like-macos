{"version":3,"sources":["components/button/index.jsx","main/Calculator.jsx","components/display/index.jsx","serviceWorker.js","index.js"],"names":["props","classes","operation","double","triple","onClick","e","click","label","className","initialState","displayValue","clearDisplay","values","current","history","Main","state","clearMemory","setState","setOperation","equals","currentOperation","eval","toFixed","console","log","addDigit","digit","includes","i","newValue","parseFloat","value","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","Calculator","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c98a307c.chunk.js","sourcesContent":["import React from 'react'\n\nimport './stylesheet.css'\n\nexport default props => {\n\n    let classes = 'button ';\n    classes+= props.operation ? 'operation' : ''\n    classes+= props.double ? 'double' : ''\n    classes+= props.triple ? 'triple' : ''\n\n    return (\n    <button\n        onClick={e => props.click && props.click(props.label)}\n        className={classes}>\n        {props.label}\n    </button>\n    )\n\n}","import React, {Component} from 'react'\nimport './Calculator.css'\n\nimport Button from '../components/button'\nimport Display from '../components/display'\n\nconst initialState = {\n    displayValue:'0',\n    clearDisplay:false,\n    operation: null,\n    values: [0,0],\n    current:0,\n    history:[]\n}\n\nexport default class Main extends Component {\n\n    state = {...initialState}\n\n    clearMemory = () => {\n        this.setState({...initialState})\n    }\n\n    setOperation = operation => {\n\n        if(this.state.current === 0){\n\n            this.setState({operation, current: 1, clearDisplay: true})\n\n        }else{\n\n            const equals = operation === '='\n\n            const currentOperation = this.state.operation\n\n            const values = [...this.state.values]\n\n            try{\n                values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\n            }catch (e){\n                values[0] = this.state.values[0]\n            }\n\n            values[1] = 0\n\n            this.setState({\n                displayValue: values[0].toFixed(2),\n                operation: equals ? null : operation,\n                values,\n                current:equals ? 0 : 1,\n                clearDisplay: !equals\n\n            })\n\n        }\n\n\n        console.log(operation)\n\n    }\n\n    addDigit = digit => {\n\n        if(digit === '.' && this.state.displayValue.includes('.'))\n            return\n\n        const clearDisplay = this.state.displayValue === '0' || this.state.clearDisplay\n\n        const currentValue = clearDisplay ? '' : this.state.displayValue\n\n        const displayValue = currentValue + digit\n\n        console.log(clearDisplay, displayValue)\n\n        this.setState({\n            displayValue,\n            clearDisplay: false\n        })\n\n        if(digit !== '.'){\n\n            const i = this.state.current\n            const newValue = parseFloat(displayValue)\n            const values = [...this.state.values]\n            values[i] = newValue\n            this.setState({values})\n            console.log(values)\n        }\n\n\n        console.log(digit)\n    }\n\n    render(){\n\n        return (\n\n            <div className=\"calculator\">\n\n                <Display value={this.state.displayValue} history={this.state.history} />\n\n                <Button triple label={'AC'} click={this.clearMemory}/>\n\n                <Button operation label={'/'} click={this.setOperation} />\n\n                <Button label={'7'} click={this.addDigit}/>\n                <Button label={'8'} click={this.addDigit}/>\n                <Button label={'9'} click={this.addDigit}/>\n\n                <Button operation label={'*'} click={this.setOperation} />\n\n                <Button label={'4'} click={this.addDigit}/>\n                <Button label={'5'} click={this.addDigit}/>\n                <Button label={'6'} click={this.addDigit}/>\n\n                <Button operation label={'-'} click={this.setOperation} />\n\n                <Button label={'1'} click={this.addDigit}/>\n                <Button label={'2'} click={this.addDigit}/>\n                <Button label={'3'} click={this.addDigit}/>\n\n                <Button operation label={'+'} click={this.setOperation} />\n\n                <Button double label={'0'} click={this.addDigit}/>\n                <Button label={'.'} click={this.addDigit}/>\n\n                <Button operation label={'='} click={this.setOperation} />\n\n            </div>\n\n        )\n\n    }\n\n}","import React from 'react'\n\nimport './stylesheet.css'\n\nexport default props =>(\n    <div className={'display'}>\n        <div className={\"value\"}>{props.value}</div>\n    </div>\n)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <div>\n        <h1>Calculator</h1>\n        <Calculator />\n    </div>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}